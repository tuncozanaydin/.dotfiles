#+TITLE: Emacs Configuration 
#+AUTHOR: Tunc Aydin

* General Settings
#+begin_src emacs-lisp :tangle config.el
  ;; -*- lexical-binding: t; -*-
  ;; Load necessary built in packages
  ;;(require 'project)
  ;;(require 'org)
  ;;(require 'ob-tangle)
  (require 'eglot)
#+end_src

* Auto-Tangle Byte-Compile config.el
#+begin_src emacs-lisp :tangle config.el
  (defun toa/tangle-and-compile-config ()
  "Tangle `config.org` to `config.el`, then byte-compile `config.el` if it changed."
  (when (and buffer-file-name (string-equal (buffer-file-name) toa/config-org))
    (message "Tangling config.org to config.el...")
    (org-babel-tangle)
    (when (file-exists-p toa/config-el)
      (message "Byte-compiling config.el...")
      (byte-compile-file toa/config-el)
      (message "Compilation complete!"))))

  ;; Add hook to automatically tangle and compile on save
  (add-hook 'after-save-hook #'toa/tangle-and-compile-config)
#+end_src

* No Littering
#+begin_src emacs-lisp :tangle config.el
  (setq emacs-litter-directory
	(expand-file-name "litter/" user-emacs-directory))
  (unless (file-directory-p emacs-litter-directory)
    (make-directory emacs-litter-directory t))

  (setq backup-directory-alist `(("." . "~/.emacs.d/litter/saves")))
  (setq no-littering-etc-directory
        (expand-file-name "config/" emacs-litter-directory))
  (setq no-littering-var-directory
        (expand-file-name "data/" emacs-litter-directory))
  (use-package no-littering
    :ensure t)
#+end_src

* Evil Mode
#+begin_src emacs-lisp :tangle config.el
  (use-package evil
    :ensure t)
  (evil-mode t)

  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  #+end_src

* Which-key 
#+begin_src emacs-lisp :tangle config.el
  (use-package which-key
    :ensure t)
  (which-key-mode)
#+end_src

* Set up C-t as user prefix key
#+begin_src emacs-lisp :tangle config.el
  ;; Remove C-t from all relevant maps
  (global-unset-key (kbd "C-t"))
  (when (boundp 'xref--map)
    (define-key xref--map (kbd "C-t") nil)) ;; older Emacs
  (when (boundp 'xref-mode-map)
    (define-key xref-mode-map (kbd "C-t") nil)) ;; newer Emacs

  ;; Define your custom prefix map
  (define-prefix-command 'toa/leader-map)

  ;; Bind C-t globally
  (global-set-key (kbd "C-t") 'toa/leader-map)

  ;; Bind C-t relevant Evil states
  (define-key evil-normal-state-map (kbd "C-t") 'toa/leader-map)
  (define-key evil-visual-state-map (kbd "C-t") 'toa/leader-map)
  (define-key evil-insert-state-map (kbd "C-t") 'toa/leader-map)

  (defun toa/define-key-with-description (keymap key command description &optional full-key)
    "Bind KEY to COMMAND in KEYMAP and register DESCRIPTION with which-key.
  If FULL-KEY is provided, use it for which-key replacement instead of KEY."
    (define-key keymap (kbd key) command)
    (when description
      (which-key-add-key-based-replacements
        (or full-key key) description)))
#+end_src

* Frame resizing via keyboard
#+begin_src emacs-lisp :tangle config.el
  (defvar toa/original-frame-config nil
    "Store original frame position and size for restoration.")

  (defun toa/frame-monitor-geometry ()
    "Get current monitor's geometry as (x y width height)."
    (alist-get 'geometry (frame-monitor-attributes)))

  (defun toa/frame-set-geometry (x y width height)
    "Set frame position to X,Y and size to WIDTHxHEIGHT (in pixels)."
    (set-frame-position nil x y)
    (set-frame-size nil width height t))

  (defun toa/frame-left-half ()
    "Resize frame to left half of current monitor."
    (interactive)
    (setq toa/original-frame-config
          (list (frame-parameter nil 'left)
                (frame-parameter nil 'top)
                (frame-pixel-width)
                (frame-pixel-height)))
    (let* ((geom (toa/frame-monitor-geometry))
           (x (nth 0 geom))
           (y (nth 1 geom))
           (w (/ (nth 2 geom) 2))
           (h (nth 3 geom)))
      (toa/frame-set-geometry x y w h)))

  (defun toa/frame-right-half ()
    "Resize frame to right half of current monitor."
    (interactive)
    (setq toa/original-frame-config
      	(list (frame-parameter nil 'left)
      	      (frame-parameter nil 'top)
      	      (frame-pixel-width)
      	      (frame-pixel-height)))
    (let* ((geom (toa/frame-monitor-geometry))
      	 (x (nth 0 geom))
      	 (y (nth 1 geom))
      	 (w (/ (nth 2 geom) 2))
      	 (h (nth 3 geom)))
      (toa/frame-set-geometry (+ x w) y w h)))

  (defun toa/frame-maximize ()
    "Resize the frame to fill the current monitor."
    (interactive)
    (setq toa/original-frame-config
          (list (frame-parameter nil 'left)
                (frame-parameter nil 'top)
                (frame-pixel-width)
                (frame-pixel-height)))
    (let* ((geom (toa/frame-monitor-geometry))
           (x (nth 0 geom))
           (y (nth 1 geom))
           (w (nth 2 geom))
           (h (nth 3 geom)))
      (toa/frame-set-geometry x y w h)))


  (defun toa/frame-restore ()
    "Restore the frame to its original size and position."
    (interactive)
    (when toa/original-frame-config
      (apply #'toa/frame-set-geometry toa/original-frame-config)))

  ;; Setup key bindings
  (define-prefix-command 'toa/leader-frame-map)
  (toa/define-key-with-description toa/leader-map "f" 'toa/leader-frame-map "frame" "C-t f")
  (toa/define-key-with-description toa/leader-frame-map "l" #'toa/frame-left-half "snap left" "C-t f l")
  (toa/define-key-with-description toa/leader-frame-map "r" #'toa/frame-right-half "snap right" "C-t f r")
  (toa/define-key-with-description toa/leader-frame-map "m" #'toa/frame-maximize "maximize" "C-t f m")
  (toa/define-key-with-description toa/leader-frame-map "x" #'toa/frame-restore "reset" "C-t f x")
#+end_src

* Vertico
#+begin_src emacs-lisp :tangle config.el
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  ;; Enable richer completion styles for better filtering
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))  ;; Use flex matching
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))  ;; Keep file paths predictable

  ;; Persist Vertico history
  (use-package savehist
    :init
    (savehist-mode))

  ;; Show more useful information in the minibuffer
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src

* Corfu
#+begin_src emacs-lisp :tangle config.el 
  (use-package corfu
    :ensure t
    :custom
    (corfu-auto t)
    :hook (python-mode . corfu-mode))

  (use-package emacs
    :custom
    (tab-always-indent 'complete))
#+end_src

* Eglot
#+begin_src emacs-lisp :tangle config.el
  (use-package eglot
    :ensure t
    :hook (python-mode . eglot-ensure))

  (defun toa/setup-completion ()
    (setq-local completion-at-point-functions
    	      (list #'eglot-completion-at-point)))

  (add-hook 'eglot-managed-mode-hook 'toa/setup-completion) 
  (defun toa/ensure-pyright-installed ()
    "Ensure pyright is installed. Offer to install pyright or node via conda."
    (unless (executable-find "pyright")
      (if (executable-find "npm")
          (when (y-or-n-p
                 "Pyright not found. Install it globally via npm? ")
            (let ((default-directory "~"))
              (shell-command "npm install -g pyright")
              (message "Pyright installed via npm.")))
        (when (and (executable-find "conda")
                   (y-or-n-p
                    "npm (Node.js) not found. Install nodejs via conda? "))
          (let ((default-directory "~"))
            (shell-command "conda install -y nodejs")
            (message "Node.js installed via conda.")
            (when (executable-find "npm")
              (when (y-or-n-p
                     "Install pyright via npm now? ")
                (shell-command "npm install -g pyright")
                (message "Pyright installed via npm."))))))))

  (add-hook 'python-mode-hook #'toa/ensure-pyright-installed)
#+end_src

* Conda
#+begin_src emacs-lisp :tangle config.el
  (use-package conda
    :ensure t
    :init
    (setq conda-anaconda-home (expand-file-name "~/miniconda3"))
    (setq conda-env-home-directory (expand-file-name "~/miniconda3/envs/"))
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode t))  ;; Auto-activate Conda environments when opening files

   (defun toa/select-conda-env ()
    "Prompt to activate a Conda environment if one isn't set in .dir-locals.el."
    (interactive)
    (unless conda-env-current-name
      (let ((env (completing-read "Select Conda Environment: "
                                  (conda-env-candidates))))
        (conda-env-activate env))))

  ;; Hook it into python-mode
  (add-hook 'python-mode-hook #'toa/select-conda-env)


#+end_src

* Smooth Scrolling
#+begin_src emacs-lisp :tangle config.el
  (setq scroll-conservatively 101)
#+end_src

* Fonts
#+begin_src emacs-lisp :tangle config.el
  (set-face-attribute 'default nil
  		      :family "Codelia Ligatures"
  		      :height 120
  		      :weight 'regular)

  (when (fboundp 'set-fontset-font)
    (set-fontset-font t 'symbol (font-spec :family "Fira Code") nil 'prepend))

  (when (fboundp 'mac-auto-operator-composition-mode)  ;; macOS-specific ligatures
    (mac-auto-operator-composition-mode))

  (use-package ligature
    :ensure t
    :config
    (ligature-set-ligatures 't '("www" "**" "***" "**/" "*>" "*/" 
                                 "||" "||=" "|=" "|>" "::" ":::" 
                                 "==" "===" "!=" "!==" "=!=" 
                                 "=>" ">>" ">>=" ">>>" "<<<" 
                                 "<=" ">=" "<=>" "<=" "<|" "<||" 
                                 "<|>" "<:" "<>" "<-<" "<<-" 
                                 "<<=" "<->" "->" "->>" "-<" 
                                 "-<<" "-=" "--" "-->" "~=" "~>"
                                 "[|" "|]" "{|" "|}" "++" "+++"))
    (global-ligature-mode t)) ;; Enable ligatures globally
#+end_src

* Theme
#+begin_src emacs-lisp :tangle config.el
  (use-package doom-themes
    :ensure t)
  (load-theme 'doom-moonlight t)

  (use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode 1))
#+end_src

* Encryption
#+begin_src emacs-lisp :tangle config.el
  (require 'epa-file)
  (epa-file-enable)
  (setq epa-file-encryp-to "tuncozanaydin@gmail.com")
  (setq epg-pinetry-mode 'loopback)
#+end_src

* Org mode
#+begin_src emacs-lisp :tangle config.el
#+end_src

* Org-roam
#+begin_src emacs-lisp
  ;;  (use-package org-roam
  ;;    :ensure t
  ;;    :custom
  ;;    (org-roam-directory "~/org/roam")
  ;;    :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;	   ("C-c n f" . org-roam-node-find)
  ;;	   ("C-c n i" . org-roam-node-insert))
  ;;    :config
  ;;    (setq org-tab-follows-link t)
  ;;    (org-roam-setup))
#+end_src

* Emacs GUI
#+begin_src emacs-lisp :tangle config.el
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode)
  (size-indication-mode)
  (set-fringe-mode 10)

  (setq visible-bell t)

  ;; Make comments italic
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)

  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :config

    (doom-modeline-mode t) 
    ;; Custom segment to show the Conda environment
    (doom-modeline-def-segment conda-env
      "Display the current Conda environment in the modeline."
      (when (and (boundp 'conda-env-current-name) conda-env-current-name)
        (format " [%s]" conda-env-current-name)))

    ;; Add the Conda environment segment to an existing modeline layout
    (doom-modeline-def-modeline 'toa/python-line
      '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position parrot selection-info)
      '(objed-state misc-info persp-name conda-env lsp minor-modes major-mode process vcs)) ;; checker))

    ;; Apply the custom modeline only in Python mode
    (add-hook 'python-mode-hook
              (lambda () (doom-modeline-set-modeline 'toa/python-line t))))

  ;; Refresh Doom Modeline when Conda environment changes
  (defun toa/update-conda-env-modeline ()
    "Update Doom Modeline when Conda environment changes."
    (doom-modeline-set-modeline 'toa/python-line t)
    (force-mode-line-update t))

  (add-hook 'conda-postactivate-hook #'toa/update-conda-env-modeline)
  (add-hook 'conda-postdeactivate-hook #'toa/update-conda-env-modeline)

  (use-package dashboard
    :config
    (setq dashboard-startup-banner "~/.emacs.d/blackhole-lines.svg")
    (setq dashboard-image-banner-max-height 600)
    (setq dashboard-banner-logo-title "Ξ  M  Λ  C  S ")
    (setq dashboard-items nil)
    (setq dashboard-footer-messages '(""))
    (setq dashboard-center-content t)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook))
#+end_src

* Treemacs 
#+begin_src emacs-lisp :tangle config.el
  (use-package treemacs
    :ensure t
    :custom
    (treemacs-collapse-dirs 3)  ;; Collapse empty directories
    (treemacs-width 25)  ;; Increase width for better visibility
    (treemacs-follow-mode t)  ;; Auto-follow the current file
    (treemacs-filewatch-mode t)  ;; Auto-refresh when files change
    (treemacs-git-mode 'deferred)  ;; Show Git status (deferred for performance)
    (treemacs-user-mode-line-format " ")
    (treemacs-text-scale -1)
    (treemacs-resize-icons 11)
    :config
    (define-prefix-command 'toa/leader-treemacs-map)
    (toa/define-key-with-description toa/leader-map "t" 'toa/leader-treemacs-map "treemacs" "C-t t")
    (toa/define-key-with-description toa/leader-treemacs-map "t" #'treemacs "toggle" "C-t t t")) 

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (require 'treemacs-all-the-icons)
  (treemacs-load-theme "all-the-icons")
#+end_src

* Shell
#+begin_src emacs-lisp :tangle config.el
  (defun toa/toggle-eshell-popup ()
    "Toggle an Eshell popup at the bottom, move focus to it, and enter insert mode."
    (interactive)
    (let* ((buf (get-buffer-create "*eshell-popup*"))
           (win (get-buffer-window buf)))
      (if win
          ;; Close Eshell only if it's not the last window
          (unless (one-window-p)
            (delete-window win))
        ;; Open Eshell at the bottom, move focus, and enter insert mode
        (progn
          (unless (eq buf (window-buffer)) ;; Prevent reopening in same window
            (with-current-buffer buf
              (unless (eq major-mode 'eshell-mode)
                (eshell-mode))))
          (let ((eshell-window (display-buffer-in-side-window
                                buf
                                '((side . bottom)
                                  (window-height . 0.3)))))
            (select-window eshell-window)
            (goto-char (point-max))  ;; Ensure cursor is at the bottom
            (when (bound-and-true-p evil-mode)
              (evil-insert-state)))))))  ;; Enter insert mode if Evil mode is enabled

  ;; Setup keybindings
  (define-prefix-command 'toa/leader-shell-map)
  (toa/define-key-with-description toa/leader-map "s" 'toa/leader-shell-map "shell" "C-t s")
  (toa/define-key-with-description toa/leader-shell-map "s" #'toa/toggle-eshell-popup "eshell popup" "C-t s s")
#+end_src

* YAML
#+begin_src emacs-lisp :tangle config.el
  (use-package yaml-mode
    :ensure t
    :hook (yaml-mode . (lambda ()
                         (setq-local indent-tabs-mode nil)  ;; Use spaces instead of tabs
                         (setq-local tab-width 2))))  ;; YAML convention: 2-space indentation
#+end_src


* Python
#+begin_src emacs-lisp :tangle config.el
  (defun toa/setup-python-mode ()
    "Configure Python mode settings."
    (setq-local indent-tabs-mode nil)  ;; Use spaces instead of tabs
    (setq-local tab-width 4)  ;; Set tab width to 4 spaces
    (electric-indent-mode 1))  ;; Auto-indent new lines

  (use-package python
    :ensure nil  ;; Built-in package
    :hook (python-mode . toa/setup-python-mode)
    :custom
    (python-indent-offset 4)  ;; Indent width of 4 spaces
    (python-indent-guess-indent-offset-verbose nil))  ;; Disable guessing indent 
#+end_src


